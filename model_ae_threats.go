/*
 * AlphaSOC API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AeThreats struct for AeThreats
type AeThreats struct {
	Threats *map[string]Threat `json:"threats,omitempty"`
}

// NewAeThreats instantiates a new AeThreats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAeThreats() *AeThreats {
	this := AeThreats{}
	return &this
}

// NewAeThreatsWithDefaults instantiates a new AeThreats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAeThreatsWithDefaults() *AeThreats {
	this := AeThreats{}
	return &this
}

// GetThreats returns the Threats field value if set, zero value otherwise.
func (o *AeThreats) GetThreats() map[string]Threat {
	if o == nil || o.Threats == nil {
		var ret map[string]Threat
		return ret
	}
	return *o.Threats
}

// GetThreatsOk returns a tuple with the Threats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AeThreats) GetThreatsOk() (*map[string]Threat, bool) {
	if o == nil || o.Threats == nil {
		return nil, false
	}
	return o.Threats, true
}

// HasThreats returns a boolean if a field has been set.
func (o *AeThreats) HasThreats() bool {
	if o != nil && o.Threats != nil {
		return true
	}

	return false
}

// SetThreats gets a reference to the given map[string]Threat and assigns it to the Threats field.
func (o *AeThreats) SetThreats(v map[string]Threat) {
	o.Threats = &v
}

func (o AeThreats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Threats != nil {
		toSerialize["threats"] = o.Threats
	}
	return json.Marshal(toSerialize)
}

type NullableAeThreats struct {
	value *AeThreats
	isSet bool
}

func (v NullableAeThreats) Get() *AeThreats {
	return v.value
}

func (v *NullableAeThreats) Set(val *AeThreats) {
	v.value = val
	v.isSet = true
}

func (v NullableAeThreats) IsSet() bool {
	return v.isSet
}

func (v *NullableAeThreats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAeThreats(val *AeThreats) *NullableAeThreats {
	return &NullableAeThreats{value: val, isSet: true}
}

func (v NullableAeThreats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAeThreats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


