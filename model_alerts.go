/*
 * REST API
 *
 * This document describes the official AlphaSOC REST API. The primary purpose of the API is to allow a wide variety of clients for sending network telemetry and receiving alerts. API endpoints are complementary to other [data sources](/sources/data-ingestion/) and [alert escalations](/destinations/alert-escalation/) in a way that alerts generated for network telemetry submitted outside of the API are available to download via API and vice versa.  ## Schema  The API can be accessed at `https://api.alphasoc.net` over HTTPS. All requests and responses are encoded in JSON.  ## Compression  As the amount of data transmitted via API can be high, it's advisable to use the compression both ways. Usually HTTP clients transparently support compression when fetching data (by providing `Accept-Encoding` header), but the upload needs to be handled manually. AlphaSOC API supports `gzip` and `deflate` compression algorithms and it's recommended to compress large chunks of data (telemetry) before sending, along with attaching corresponding `Content-Encoding` header.  ## Rate limiting  API counts and limits number of requests from a single API key. The limits are not strictly defined and designed to protect from flooding and accidental errors in client's implementation. In the unlikely case of hitting the limit API returns `429 Too Many Requests` response and expects the client to retry after some time.
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alphasoc

import (
	"encoding/json"
)

// Alerts struct for Alerts
type Alerts struct {
	// Page bookmark. Can be passed to consecutive request to retrieve only new alerts since the last query.
	Follow *string `json:"follow,omitempty"`
	// Indicates if there are more alerts to retrieve.
	More *bool `json:"more,omitempty"`
	// Array of alerts.
	Alerts *[]Alert `json:"alerts,omitempty"`
	// Dictionary containing definition of threats.
	Threats *map[string]Threat `json:"threats,omitempty"`
}

// NewAlerts instantiates a new Alerts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlerts() *Alerts {
	this := Alerts{}
	return &this
}

// NewAlertsWithDefaults instantiates a new Alerts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertsWithDefaults() *Alerts {
	this := Alerts{}
	return &this
}

// GetFollow returns the Follow field value if set, zero value otherwise.
func (o *Alerts) GetFollow() string {
	if o == nil || o.Follow == nil {
		var ret string
		return ret
	}
	return *o.Follow
}

// GetFollowOk returns a tuple with the Follow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alerts) GetFollowOk() (*string, bool) {
	if o == nil || o.Follow == nil {
		return nil, false
	}
	return o.Follow, true
}

// HasFollow returns a boolean if a field has been set.
func (o *Alerts) HasFollow() bool {
	if o != nil && o.Follow != nil {
		return true
	}

	return false
}

// SetFollow gets a reference to the given string and assigns it to the Follow field.
func (o *Alerts) SetFollow(v string) {
	o.Follow = &v
}

// GetMore returns the More field value if set, zero value otherwise.
func (o *Alerts) GetMore() bool {
	if o == nil || o.More == nil {
		var ret bool
		return ret
	}
	return *o.More
}

// GetMoreOk returns a tuple with the More field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alerts) GetMoreOk() (*bool, bool) {
	if o == nil || o.More == nil {
		return nil, false
	}
	return o.More, true
}

// HasMore returns a boolean if a field has been set.
func (o *Alerts) HasMore() bool {
	if o != nil && o.More != nil {
		return true
	}

	return false
}

// SetMore gets a reference to the given bool and assigns it to the More field.
func (o *Alerts) SetMore(v bool) {
	o.More = &v
}

// GetAlerts returns the Alerts field value if set, zero value otherwise.
func (o *Alerts) GetAlerts() []Alert {
	if o == nil || o.Alerts == nil {
		var ret []Alert
		return ret
	}
	return *o.Alerts
}

// GetAlertsOk returns a tuple with the Alerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alerts) GetAlertsOk() (*[]Alert, bool) {
	if o == nil || o.Alerts == nil {
		return nil, false
	}
	return o.Alerts, true
}

// HasAlerts returns a boolean if a field has been set.
func (o *Alerts) HasAlerts() bool {
	if o != nil && o.Alerts != nil {
		return true
	}

	return false
}

// SetAlerts gets a reference to the given []Alert and assigns it to the Alerts field.
func (o *Alerts) SetAlerts(v []Alert) {
	o.Alerts = &v
}

// GetThreats returns the Threats field value if set, zero value otherwise.
func (o *Alerts) GetThreats() map[string]Threat {
	if o == nil || o.Threats == nil {
		var ret map[string]Threat
		return ret
	}
	return *o.Threats
}

// GetThreatsOk returns a tuple with the Threats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alerts) GetThreatsOk() (*map[string]Threat, bool) {
	if o == nil || o.Threats == nil {
		return nil, false
	}
	return o.Threats, true
}

// HasThreats returns a boolean if a field has been set.
func (o *Alerts) HasThreats() bool {
	if o != nil && o.Threats != nil {
		return true
	}

	return false
}

// SetThreats gets a reference to the given map[string]Threat and assigns it to the Threats field.
func (o *Alerts) SetThreats(v map[string]Threat) {
	o.Threats = &v
}

func (o Alerts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Follow != nil {
		toSerialize["follow"] = o.Follow
	}
	if o.More != nil {
		toSerialize["more"] = o.More
	}
	if o.Alerts != nil {
		toSerialize["alerts"] = o.Alerts
	}
	if o.Threats != nil {
		toSerialize["threats"] = o.Threats
	}
	return json.Marshal(toSerialize)
}

type NullableAlerts struct {
	value *Alerts
	isSet bool
}

func (v NullableAlerts) Get() *Alerts {
	return v.value
}

func (v *NullableAlerts) Set(val *Alerts) {
	v.value = val
	v.isSet = true
}

func (v NullableAlerts) IsSet() bool {
	return v.isSet
}

func (v *NullableAlerts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlerts(val *Alerts) *NullableAlerts {
	return &NullableAlerts{value: val, isSet: true}
}

func (v NullableAlerts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlerts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
