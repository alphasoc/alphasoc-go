/*
 * AlphaSOC API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Alerts struct for Alerts
type Alerts struct {
	Follow *string `json:"follow,omitempty"`
	More *bool `json:"more,omitempty"`
	Alerts *[]Alert `json:"alerts,omitempty"`
}

// NewAlerts instantiates a new Alerts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlerts() *Alerts {
	this := Alerts{}
	return &this
}

// NewAlertsWithDefaults instantiates a new Alerts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertsWithDefaults() *Alerts {
	this := Alerts{}
	return &this
}

// GetFollow returns the Follow field value if set, zero value otherwise.
func (o *Alerts) GetFollow() string {
	if o == nil || o.Follow == nil {
		var ret string
		return ret
	}
	return *o.Follow
}

// GetFollowOk returns a tuple with the Follow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alerts) GetFollowOk() (*string, bool) {
	if o == nil || o.Follow == nil {
		return nil, false
	}
	return o.Follow, true
}

// HasFollow returns a boolean if a field has been set.
func (o *Alerts) HasFollow() bool {
	if o != nil && o.Follow != nil {
		return true
	}

	return false
}

// SetFollow gets a reference to the given string and assigns it to the Follow field.
func (o *Alerts) SetFollow(v string) {
	o.Follow = &v
}

// GetMore returns the More field value if set, zero value otherwise.
func (o *Alerts) GetMore() bool {
	if o == nil || o.More == nil {
		var ret bool
		return ret
	}
	return *o.More
}

// GetMoreOk returns a tuple with the More field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alerts) GetMoreOk() (*bool, bool) {
	if o == nil || o.More == nil {
		return nil, false
	}
	return o.More, true
}

// HasMore returns a boolean if a field has been set.
func (o *Alerts) HasMore() bool {
	if o != nil && o.More != nil {
		return true
	}

	return false
}

// SetMore gets a reference to the given bool and assigns it to the More field.
func (o *Alerts) SetMore(v bool) {
	o.More = &v
}

// GetAlerts returns the Alerts field value if set, zero value otherwise.
func (o *Alerts) GetAlerts() []Alert {
	if o == nil || o.Alerts == nil {
		var ret []Alert
		return ret
	}
	return *o.Alerts
}

// GetAlertsOk returns a tuple with the Alerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alerts) GetAlertsOk() (*[]Alert, bool) {
	if o == nil || o.Alerts == nil {
		return nil, false
	}
	return o.Alerts, true
}

// HasAlerts returns a boolean if a field has been set.
func (o *Alerts) HasAlerts() bool {
	if o != nil && o.Alerts != nil {
		return true
	}

	return false
}

// SetAlerts gets a reference to the given []Alert and assigns it to the Alerts field.
func (o *Alerts) SetAlerts(v []Alert) {
	o.Alerts = &v
}

func (o Alerts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Follow != nil {
		toSerialize["follow"] = o.Follow
	}
	if o.More != nil {
		toSerialize["more"] = o.More
	}
	if o.Alerts != nil {
		toSerialize["alerts"] = o.Alerts
	}
	return json.Marshal(toSerialize)
}

type NullableAlerts struct {
	value *Alerts
	isSet bool
}

func (v NullableAlerts) Get() *Alerts {
	return v.value
}

func (v *NullableAlerts) Set(val *Alerts) {
	v.value = val
	v.isSet = true
}

func (v NullableAlerts) IsSet() bool {
	return v.isSet
}

func (v *NullableAlerts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlerts(val *Alerts) *NullableAlerts {
	return &NullableAlerts{value: val, isSet: true}
}

func (v NullableAlerts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlerts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


