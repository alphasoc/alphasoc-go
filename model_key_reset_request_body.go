/*
 * AlphaSOC API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KeyResetRequestBody struct for KeyResetRequestBody
type KeyResetRequestBody struct {
	Email *string `json:"email,omitempty"`
}

// NewKeyResetRequestBody instantiates a new KeyResetRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyResetRequestBody() *KeyResetRequestBody {
	this := KeyResetRequestBody{}
	return &this
}

// NewKeyResetRequestBodyWithDefaults instantiates a new KeyResetRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyResetRequestBodyWithDefaults() *KeyResetRequestBody {
	this := KeyResetRequestBody{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *KeyResetRequestBody) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyResetRequestBody) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *KeyResetRequestBody) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *KeyResetRequestBody) SetEmail(v string) {
	o.Email = &v
}

func (o KeyResetRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	return json.Marshal(toSerialize)
}

type NullableKeyResetRequestBody struct {
	value *KeyResetRequestBody
	isSet bool
}

func (v NullableKeyResetRequestBody) Get() *KeyResetRequestBody {
	return v.value
}

func (v *NullableKeyResetRequestBody) Set(val *KeyResetRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyResetRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyResetRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyResetRequestBody(val *KeyResetRequestBody) *NullableKeyResetRequestBody {
	return &NullableKeyResetRequestBody{value: val, isSet: true}
}

func (v NullableKeyResetRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyResetRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


