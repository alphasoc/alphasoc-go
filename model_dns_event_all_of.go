/*
 * AlphaSOC API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DnsEventAllOf struct for DnsEventAllOf
type DnsEventAllOf struct {
	Query *string `json:"query,omitempty"`
	Qtype *string `json:"qtype,omitempty"`
}

// NewDnsEventAllOf instantiates a new DnsEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsEventAllOf() *DnsEventAllOf {
	this := DnsEventAllOf{}
	return &this
}

// NewDnsEventAllOfWithDefaults instantiates a new DnsEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsEventAllOfWithDefaults() *DnsEventAllOf {
	this := DnsEventAllOf{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *DnsEventAllOf) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsEventAllOf) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *DnsEventAllOf) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *DnsEventAllOf) SetQuery(v string) {
	o.Query = &v
}

// GetQtype returns the Qtype field value if set, zero value otherwise.
func (o *DnsEventAllOf) GetQtype() string {
	if o == nil || o.Qtype == nil {
		var ret string
		return ret
	}
	return *o.Qtype
}

// GetQtypeOk returns a tuple with the Qtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsEventAllOf) GetQtypeOk() (*string, bool) {
	if o == nil || o.Qtype == nil {
		return nil, false
	}
	return o.Qtype, true
}

// HasQtype returns a boolean if a field has been set.
func (o *DnsEventAllOf) HasQtype() bool {
	if o != nil && o.Qtype != nil {
		return true
	}

	return false
}

// SetQtype gets a reference to the given string and assigns it to the Qtype field.
func (o *DnsEventAllOf) SetQtype(v string) {
	o.Qtype = &v
}

func (o DnsEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Qtype != nil {
		toSerialize["qtype"] = o.Qtype
	}
	return json.Marshal(toSerialize)
}

type NullableDnsEventAllOf struct {
	value *DnsEventAllOf
	isSet bool
}

func (v NullableDnsEventAllOf) Get() *DnsEventAllOf {
	return v.value
}

func (v *NullableDnsEventAllOf) Set(val *DnsEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsEventAllOf(val *DnsEventAllOf) *NullableDnsEventAllOf {
	return &NullableDnsEventAllOf{value: val, isSet: true}
}

func (v NullableDnsEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


