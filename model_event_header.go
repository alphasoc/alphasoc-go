/*
 * AlphaSOC API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// EventHeader struct for EventHeader
type EventHeader struct {
	Ts *time.Time `json:"ts,omitempty"`
	SrcIP *string `json:"srcIP,omitempty"`
	SrcPort *int32 `json:"srcPort,omitempty"`
	SrcHost *string `json:"srcHost,omitempty"`
	SrcMac *string `json:"srcMac,omitempty"`
	SrcUser *string `json:"srcUser,omitempty"`
	SrcID *string `json:"srcID,omitempty"`
}

// NewEventHeader instantiates a new EventHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventHeader() *EventHeader {
	this := EventHeader{}
	return &this
}

// NewEventHeaderWithDefaults instantiates a new EventHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventHeaderWithDefaults() *EventHeader {
	this := EventHeader{}
	return &this
}

// GetTs returns the Ts field value if set, zero value otherwise.
func (o *EventHeader) GetTs() time.Time {
	if o == nil || o.Ts == nil {
		var ret time.Time
		return ret
	}
	return *o.Ts
}

// GetTsOk returns a tuple with the Ts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventHeader) GetTsOk() (*time.Time, bool) {
	if o == nil || o.Ts == nil {
		return nil, false
	}
	return o.Ts, true
}

// HasTs returns a boolean if a field has been set.
func (o *EventHeader) HasTs() bool {
	if o != nil && o.Ts != nil {
		return true
	}

	return false
}

// SetTs gets a reference to the given time.Time and assigns it to the Ts field.
func (o *EventHeader) SetTs(v time.Time) {
	o.Ts = &v
}

// GetSrcIP returns the SrcIP field value if set, zero value otherwise.
func (o *EventHeader) GetSrcIP() string {
	if o == nil || o.SrcIP == nil {
		var ret string
		return ret
	}
	return *o.SrcIP
}

// GetSrcIPOk returns a tuple with the SrcIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventHeader) GetSrcIPOk() (*string, bool) {
	if o == nil || o.SrcIP == nil {
		return nil, false
	}
	return o.SrcIP, true
}

// HasSrcIP returns a boolean if a field has been set.
func (o *EventHeader) HasSrcIP() bool {
	if o != nil && o.SrcIP != nil {
		return true
	}

	return false
}

// SetSrcIP gets a reference to the given string and assigns it to the SrcIP field.
func (o *EventHeader) SetSrcIP(v string) {
	o.SrcIP = &v
}

// GetSrcPort returns the SrcPort field value if set, zero value otherwise.
func (o *EventHeader) GetSrcPort() int32 {
	if o == nil || o.SrcPort == nil {
		var ret int32
		return ret
	}
	return *o.SrcPort
}

// GetSrcPortOk returns a tuple with the SrcPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventHeader) GetSrcPortOk() (*int32, bool) {
	if o == nil || o.SrcPort == nil {
		return nil, false
	}
	return o.SrcPort, true
}

// HasSrcPort returns a boolean if a field has been set.
func (o *EventHeader) HasSrcPort() bool {
	if o != nil && o.SrcPort != nil {
		return true
	}

	return false
}

// SetSrcPort gets a reference to the given int32 and assigns it to the SrcPort field.
func (o *EventHeader) SetSrcPort(v int32) {
	o.SrcPort = &v
}

// GetSrcHost returns the SrcHost field value if set, zero value otherwise.
func (o *EventHeader) GetSrcHost() string {
	if o == nil || o.SrcHost == nil {
		var ret string
		return ret
	}
	return *o.SrcHost
}

// GetSrcHostOk returns a tuple with the SrcHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventHeader) GetSrcHostOk() (*string, bool) {
	if o == nil || o.SrcHost == nil {
		return nil, false
	}
	return o.SrcHost, true
}

// HasSrcHost returns a boolean if a field has been set.
func (o *EventHeader) HasSrcHost() bool {
	if o != nil && o.SrcHost != nil {
		return true
	}

	return false
}

// SetSrcHost gets a reference to the given string and assigns it to the SrcHost field.
func (o *EventHeader) SetSrcHost(v string) {
	o.SrcHost = &v
}

// GetSrcMac returns the SrcMac field value if set, zero value otherwise.
func (o *EventHeader) GetSrcMac() string {
	if o == nil || o.SrcMac == nil {
		var ret string
		return ret
	}
	return *o.SrcMac
}

// GetSrcMacOk returns a tuple with the SrcMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventHeader) GetSrcMacOk() (*string, bool) {
	if o == nil || o.SrcMac == nil {
		return nil, false
	}
	return o.SrcMac, true
}

// HasSrcMac returns a boolean if a field has been set.
func (o *EventHeader) HasSrcMac() bool {
	if o != nil && o.SrcMac != nil {
		return true
	}

	return false
}

// SetSrcMac gets a reference to the given string and assigns it to the SrcMac field.
func (o *EventHeader) SetSrcMac(v string) {
	o.SrcMac = &v
}

// GetSrcUser returns the SrcUser field value if set, zero value otherwise.
func (o *EventHeader) GetSrcUser() string {
	if o == nil || o.SrcUser == nil {
		var ret string
		return ret
	}
	return *o.SrcUser
}

// GetSrcUserOk returns a tuple with the SrcUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventHeader) GetSrcUserOk() (*string, bool) {
	if o == nil || o.SrcUser == nil {
		return nil, false
	}
	return o.SrcUser, true
}

// HasSrcUser returns a boolean if a field has been set.
func (o *EventHeader) HasSrcUser() bool {
	if o != nil && o.SrcUser != nil {
		return true
	}

	return false
}

// SetSrcUser gets a reference to the given string and assigns it to the SrcUser field.
func (o *EventHeader) SetSrcUser(v string) {
	o.SrcUser = &v
}

// GetSrcID returns the SrcID field value if set, zero value otherwise.
func (o *EventHeader) GetSrcID() string {
	if o == nil || o.SrcID == nil {
		var ret string
		return ret
	}
	return *o.SrcID
}

// GetSrcIDOk returns a tuple with the SrcID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventHeader) GetSrcIDOk() (*string, bool) {
	if o == nil || o.SrcID == nil {
		return nil, false
	}
	return o.SrcID, true
}

// HasSrcID returns a boolean if a field has been set.
func (o *EventHeader) HasSrcID() bool {
	if o != nil && o.SrcID != nil {
		return true
	}

	return false
}

// SetSrcID gets a reference to the given string and assigns it to the SrcID field.
func (o *EventHeader) SetSrcID(v string) {
	o.SrcID = &v
}

func (o EventHeader) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ts != nil {
		toSerialize["ts"] = o.Ts
	}
	if o.SrcIP != nil {
		toSerialize["srcIP"] = o.SrcIP
	}
	if o.SrcPort != nil {
		toSerialize["srcPort"] = o.SrcPort
	}
	if o.SrcHost != nil {
		toSerialize["srcHost"] = o.SrcHost
	}
	if o.SrcMac != nil {
		toSerialize["srcMac"] = o.SrcMac
	}
	if o.SrcUser != nil {
		toSerialize["srcUser"] = o.SrcUser
	}
	if o.SrcID != nil {
		toSerialize["srcID"] = o.SrcID
	}
	return json.Marshal(toSerialize)
}

type NullableEventHeader struct {
	value *EventHeader
	isSet bool
}

func (v NullableEventHeader) Get() *EventHeader {
	return v.value
}

func (v *NullableEventHeader) Set(val *EventHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableEventHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableEventHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventHeader(val *EventHeader) *NullableEventHeader {
	return &NullableEventHeader{value: val, isSet: true}
}

func (v NullableEventHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


