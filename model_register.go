/*
 * AlphaSOC API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Register struct for Register
type Register struct {
	Details *RegisterDetails `json:"details,omitempty"`
}

// NewRegister instantiates a new Register object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegister() *Register {
	this := Register{}
	return &this
}

// NewRegisterWithDefaults instantiates a new Register object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterWithDefaults() *Register {
	this := Register{}
	return &this
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Register) GetDetails() RegisterDetails {
	if o == nil || o.Details == nil {
		var ret RegisterDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Register) GetDetailsOk() (*RegisterDetails, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Register) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given RegisterDetails and assigns it to the Details field.
func (o *Register) SetDetails(v RegisterDetails) {
	o.Details = &v
}

func (o Register) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	return json.Marshal(toSerialize)
}

type NullableRegister struct {
	value *Register
	isSet bool
}

func (v NullableRegister) Get() *Register {
	return v.value
}

func (v *NullableRegister) Set(val *Register) {
	v.value = val
	v.isSet = true
}

func (v NullableRegister) IsSet() bool {
	return v.isSet
}

func (v *NullableRegister) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegister(val *Register) *NullableRegister {
	return &NullableRegister{value: val, isSet: true}
}

func (v NullableRegister) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegister) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


